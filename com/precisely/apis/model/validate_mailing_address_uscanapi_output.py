"""
    Precisely APIs

    Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.  # noqa: E501

    The version of the OpenAPI document: 12.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from com.precisely.apis.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from com.precisely.apis.exceptions import ApiAttributeError


def lazy_import():
    from com.precisely.apis.model.get_postal_codes_api_output_user_fields import GetPostalCodesAPIOutputUserFields
    globals()['GetPostalCodesAPIOutputUserFields'] = GetPostalCodesAPIOutputUserFields


class ValidateMailingAddressUSCANAPIOutput(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'user_fields': ([GetPostalCodesAPIOutputUserFields],),  # noqa: E501
            'status': (str,),  # noqa: E501
            'status_code': (str,),  # noqa: E501
            'status_description': (str,),  # noqa: E501
            'address_line1': (str,),  # noqa: E501
            'address_line2': (str,),  # noqa: E501
            'city': (str,),  # noqa: E501
            'state_province': (str,),  # noqa: E501
            'postal_code': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'firm_name': (str,),  # noqa: E501
            'block_address': (str,),  # noqa: E501
            'postal_code_base': (str,),  # noqa: E501
            'postal_code_add_on': (str,),  # noqa: E501
            'additional_input_data': (str,),  # noqa: E501
            'could_not_validate': (str,),  # noqa: E501
            'address_format': (str,),  # noqa: E501
            'address_line3': (str,),  # noqa: E501
            'address_line4': (str,),  # noqa: E501
            'address_record_result': (str,),  # noqa: E501
            'apartment_label': (str,),  # noqa: E501
            'apartment_label_input': (str,),  # noqa: E501
            'apartment_label_result': (str,),  # noqa: E501
            'apartment_number': (str,),  # noqa: E501
            'apartment_number_input': (str,),  # noqa: E501
            'apartment_number_result': (str,),  # noqa: E501
            'city_input': (str,),  # noqa: E501
            'city_result': (str,),  # noqa: E501
            'confidence': (str,),  # noqa: E501
            'country_input': (str,),  # noqa: E501
            'country_result': (str,),  # noqa: E501
            'country_level': (str,),  # noqa: E501
            'firm_name_input': (str,),  # noqa: E501
            'firm_name_result': (str,),  # noqa: E501
            'house_number': (str,),  # noqa: E501
            'house_number_input': (str,),  # noqa: E501
            'house_number_result': (str,),  # noqa: E501
            'leading_directional': (str,),  # noqa: E501
            'leading_directional_input': (str,),  # noqa: E501
            'leading_directional_result': (str,),  # noqa: E501
            'multiple_matches': (str,),  # noqa: E501
            'po_box': (str,),  # noqa: E501
            'po_box_input': (str,),  # noqa: E501
            'po_box_result': (str,),  # noqa: E501
            'postal_code_input': (str,),  # noqa: E501
            'postal_code_result': (str,),  # noqa: E501
            'postal_code_source': (str,),  # noqa: E501
            'postal_code_type': (str,),  # noqa: E501
            'postal_code_city_result': (str,),  # noqa: E501
            'private_mailbox': (str,),  # noqa: E501
            'private_mailbox_input': (str,),  # noqa: E501
            'private_mailbox_type': (str,),  # noqa: E501
            'private_mailbox_type_input': (str,),  # noqa: E501
            'record_type': (str,),  # noqa: E501
            'record_type_default': (str,),  # noqa: E501
            'rrhc': (str,),  # noqa: E501
            'rrhc_input': (str,),  # noqa: E501
            'rrhc_result': (str,),  # noqa: E501
            'rrhc_type': (str,),  # noqa: E501
            'state_province_input': (str,),  # noqa: E501
            'state_province_result': (str,),  # noqa: E501
            'street_result': (str,),  # noqa: E501
            'street_name': (str,),  # noqa: E501
            'street_name_alias_type': (str,),  # noqa: E501
            'street_name_input': (str,),  # noqa: E501
            'street_name_result': (str,),  # noqa: E501
            'street_name_abbreviated_alias_result': (str,),  # noqa: E501
            'street_name_preferred_alias_result': (str,),  # noqa: E501
            'street_suffix': (str,),  # noqa: E501
            'street_suffix_input': (str,),  # noqa: E501
            'street_suffix_result': (str,),  # noqa: E501
            'trailing_directional': (str,),  # noqa: E501
            'trailing_directional_input': (str,),  # noqa: E501
            'trailing_directional_result': (str,),  # noqa: E501
            'match_score': (str,),  # noqa: E501
            'uslacs': (str,),  # noqa: E501
            'uslacs_return_code': (str,),  # noqa: E501
            'rdi': (str,),  # noqa: E501
            'cmra': (str,),  # noqa: E501
            'dpv': (str,),  # noqa: E501
            'dpv_footnote': (str,),  # noqa: E501
            'suite_link_return_code': (str,),  # noqa: E501
            'suite_link_match_code': (str,),  # noqa: E501
            'suite_link_fidelity': (str,),  # noqa: E501
            'usbc_check_digit': (str,),  # noqa: E501
            'postal_bar_code': (str,),  # noqa: E501
            'us_carrier_route_code': (str,),  # noqa: E501
            'usfips_county_number': (str,),  # noqa: E501
            'us_county_name': (str,),  # noqa: E501
            'us_congressional_district': (str,),  # noqa: E501
            'us_alt_addr': (str,),  # noqa: E501
            'us_last_line_number': (str,),  # noqa: E501
            'us_finance_number': (str,),  # noqa: E501
            'us_urban_name': (str,),  # noqa: E501
            'us_urban_name_input': (str,),  # noqa: E501
            'us_urban_name_result': (str,),  # noqa: E501
            'multimatch_count': (str,),  # noqa: E501
            'address_block1': (str,),  # noqa: E501
            'address_block2': (str,),  # noqa: E501
            'address_block3': (str,),  # noqa: E501
            'address_block4': (str,),  # noqa: E501
            'address_block5': (str,),  # noqa: E501
            'address_block6': (str,),  # noqa: E501
            'address_block7': (str,),  # noqa: E501
            'address_block8': (str,),  # noqa: E501
            'address_block9': (str,),  # noqa: E501
            'can_language': (str,),  # noqa: E501
            'dpvno_stat': (str,),  # noqa: E501
            'dpv_vacant': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'user_fields': 'user_fields',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'status_code': 'Status.Code',  # noqa: E501
        'status_description': 'Status.description',  # noqa: E501
        'address_line1': 'AddressLine1',  # noqa: E501
        'address_line2': 'AddressLine2',  # noqa: E501
        'city': 'City',  # noqa: E501
        'state_province': 'StateProvince',  # noqa: E501
        'postal_code': 'PostalCode',  # noqa: E501
        'country': 'Country',  # noqa: E501
        'firm_name': 'FirmName',  # noqa: E501
        'block_address': 'BlockAddress',  # noqa: E501
        'postal_code_base': 'PostalCode.Base',  # noqa: E501
        'postal_code_add_on': 'PostalCode.AddOn',  # noqa: E501
        'additional_input_data': 'AdditionalInputData',  # noqa: E501
        'could_not_validate': 'CouldNotValidate',  # noqa: E501
        'address_format': 'AddressFormat',  # noqa: E501
        'address_line3': 'AddressLine3',  # noqa: E501
        'address_line4': 'AddressLine4',  # noqa: E501
        'address_record_result': 'AddressRecord.Result',  # noqa: E501
        'apartment_label': 'ApartmentLabel',  # noqa: E501
        'apartment_label_input': 'ApartmentLabel.Input',  # noqa: E501
        'apartment_label_result': 'ApartmentLabel.Result',  # noqa: E501
        'apartment_number': 'ApartmentNumber',  # noqa: E501
        'apartment_number_input': 'ApartmentNumber.Input',  # noqa: E501
        'apartment_number_result': 'ApartmentNumber.Result',  # noqa: E501
        'city_input': 'City.Input',  # noqa: E501
        'city_result': 'City.Result',  # noqa: E501
        'confidence': 'Confidence',  # noqa: E501
        'country_input': 'Country.Input',  # noqa: E501
        'country_result': 'Country.Result',  # noqa: E501
        'country_level': 'CountryLevel',  # noqa: E501
        'firm_name_input': 'FirmName.Input',  # noqa: E501
        'firm_name_result': 'FirmName.Result',  # noqa: E501
        'house_number': 'HouseNumber',  # noqa: E501
        'house_number_input': 'HouseNumber.Input',  # noqa: E501
        'house_number_result': 'HouseNumber.Result',  # noqa: E501
        'leading_directional': 'LeadingDirectional',  # noqa: E501
        'leading_directional_input': 'LeadingDirectional.Input',  # noqa: E501
        'leading_directional_result': 'LeadingDirectional.Result',  # noqa: E501
        'multiple_matches': 'MultipleMatches',  # noqa: E501
        'po_box': 'POBox',  # noqa: E501
        'po_box_input': 'POBox.Input',  # noqa: E501
        'po_box_result': 'POBox.Result',  # noqa: E501
        'postal_code_input': 'PostalCode.Input',  # noqa: E501
        'postal_code_result': 'PostalCode.Result',  # noqa: E501
        'postal_code_source': 'PostalCode.Source',  # noqa: E501
        'postal_code_type': 'PostalCode.Type',  # noqa: E501
        'postal_code_city_result': 'PostalCodeCity.Result',  # noqa: E501
        'private_mailbox': 'PrivateMailbox',  # noqa: E501
        'private_mailbox_input': 'PrivateMailbox.Input',  # noqa: E501
        'private_mailbox_type': 'PrivateMailbox.Type',  # noqa: E501
        'private_mailbox_type_input': 'PrivateMailbox.Type.Input',  # noqa: E501
        'record_type': 'RecordType',  # noqa: E501
        'record_type_default': 'RecordType.Default',  # noqa: E501
        'rrhc': 'RRHC',  # noqa: E501
        'rrhc_input': 'RRHC.Input',  # noqa: E501
        'rrhc_result': 'RRHC.Result',  # noqa: E501
        'rrhc_type': 'RRHC.Type',  # noqa: E501
        'state_province_input': 'StateProvince.Input',  # noqa: E501
        'state_province_result': 'StateProvince.Result',  # noqa: E501
        'street_result': 'Street.Result',  # noqa: E501
        'street_name': 'StreetName',  # noqa: E501
        'street_name_alias_type': 'StreetName.Alias.Type',  # noqa: E501
        'street_name_input': 'StreetName.Input',  # noqa: E501
        'street_name_result': 'StreetName.Result',  # noqa: E501
        'street_name_abbreviated_alias_result': 'StreetNameAbbreviatedAlias.Result',  # noqa: E501
        'street_name_preferred_alias_result': 'StreetNamePreferredAlias.Result',  # noqa: E501
        'street_suffix': 'StreetSuffix',  # noqa: E501
        'street_suffix_input': 'StreetSuffix.Input',  # noqa: E501
        'street_suffix_result': 'StreetSuffix.Result',  # noqa: E501
        'trailing_directional': 'TrailingDirectional',  # noqa: E501
        'trailing_directional_input': 'TrailingDirectional.Input',  # noqa: E501
        'trailing_directional_result': 'TrailingDirectional.Result',  # noqa: E501
        'match_score': 'MatchScore',  # noqa: E501
        'uslacs': 'USLACS',  # noqa: E501
        'uslacs_return_code': 'USLACS.ReturnCode',  # noqa: E501
        'rdi': 'RDI',  # noqa: E501
        'cmra': 'CMRA',  # noqa: E501
        'dpv': 'DPV',  # noqa: E501
        'dpv_footnote': 'DPVFootnote',  # noqa: E501
        'suite_link_return_code': 'SuiteLinkReturnCode',  # noqa: E501
        'suite_link_match_code': 'SuiteLinkMatchCode',  # noqa: E501
        'suite_link_fidelity': 'SuiteLinkFidelity',  # noqa: E501
        'usbc_check_digit': 'USBCCheckDigit',  # noqa: E501
        'postal_bar_code': 'PostalBarCode',  # noqa: E501
        'us_carrier_route_code': 'USCarrierRouteCode',  # noqa: E501
        'usfips_county_number': 'USFIPSCountyNumber',  # noqa: E501
        'us_county_name': 'USCountyName',  # noqa: E501
        'us_congressional_district': 'USCongressionalDistrict',  # noqa: E501
        'us_alt_addr': 'USAltAddr',  # noqa: E501
        'us_last_line_number': 'USLastLineNumber',  # noqa: E501
        'us_finance_number': 'USFinanceNumber',  # noqa: E501
        'us_urban_name': 'USUrbanName',  # noqa: E501
        'us_urban_name_input': 'USUrbanName.Input',  # noqa: E501
        'us_urban_name_result': 'USUrbanName.Result',  # noqa: E501
        'multimatch_count': 'MultimatchCount',  # noqa: E501
        'address_block1': 'AddressBlock1',  # noqa: E501
        'address_block2': 'AddressBlock2',  # noqa: E501
        'address_block3': 'AddressBlock3',  # noqa: E501
        'address_block4': 'AddressBlock4',  # noqa: E501
        'address_block5': 'AddressBlock5',  # noqa: E501
        'address_block6': 'AddressBlock6',  # noqa: E501
        'address_block7': 'AddressBlock7',  # noqa: E501
        'address_block8': 'AddressBlock8',  # noqa: E501
        'address_block9': 'AddressBlock9',  # noqa: E501
        'can_language': 'CanLanguage',  # noqa: E501
        'dpvno_stat': 'DPVNoStat',  # noqa: E501
        'dpv_vacant': 'DPVVacant',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ValidateMailingAddressUSCANAPIOutput - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            user_fields ([GetPostalCodesAPIOutputUserFields]): These fields are returned, unmodified, in the user_fields section of the response.. [optional]  # noqa: E501
            status (str): Reports the success or failure of the match attempt.. [optional]  # noqa: E501
            status_code (str): Reason for failure, if there is one.. [optional]  # noqa: E501
            status_description (str): Specifies the description of the problem, if there is one.. [optional]  # noqa: E501
            address_line1 (str): Specifies the first line of the validated and standardized address.. [optional]  # noqa: E501
            address_line2 (str): Specifies the second line of the validated and standardized address.. [optional]  # noqa: E501
            city (str): Specifies the validated city name.. [optional]  # noqa: E501
            state_province (str): Specifies the validated state or province abbreviation.. [optional]  # noqa: E501
            postal_code (str): Specifies the validated ZIP Code or postal code.. [optional]  # noqa: E501
            country (str): Specifies the country in the format determined by the selection from ISO or UPO or English.. [optional]  # noqa: E501
            firm_name (str): Specifies the validated firm or company name.. [optional]  # noqa: E501
            block_address (str): Specifies the formatted address, as it would appear on a physical mail piece. . [optional]  # noqa: E501
            postal_code_base (str): Specifies the 5-digit ZIP Code.. [optional]  # noqa: E501
            postal_code_add_on (str): Specifies the 4-digit add-on part of the ZIP Code.. [optional]  # noqa: E501
            additional_input_data (str): Specifies input data not used by the address validation process.. [optional]  # noqa: E501
            could_not_validate (str): Specifies the address component that could not be validated, in case no match is found. . [optional]  # noqa: E501
            address_format (str): Specifies the type of address data being returned.. [optional]  # noqa: E501
            address_line3 (str): Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.. [optional]  # noqa: E501
            address_line4 (str): Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.. [optional]  # noqa: E501
            address_record_result (str): Specifies the result codes that apply to international addresses only.. [optional]  # noqa: E501
            apartment_label (str): Specifies the apartment designator such as STE or APT.. [optional]  # noqa: E501
            apartment_label_input (str): Specifies the apartment designator such as STE or APT.. [optional]  # noqa: E501
            apartment_label_result (str): Specifies the result of apartment label.. [optional]  # noqa: E501
            apartment_number (str): Specifies the apartment number.. [optional]  # noqa: E501
            apartment_number_input (str): Specifies the apartment number.. [optional]  # noqa: E501
            apartment_number_result (str): Specifies the result of apartment number.. [optional]  # noqa: E501
            city_input (str): Specifies the validated city name.. [optional]  # noqa: E501
            city_result (str): Specifies the result of the validated city name.. [optional]  # noqa: E501
            confidence (str): Specifies the the level of confidence assigned to the address being returned.. [optional]  # noqa: E501
            country_input (str): Specifies the name of the country.. [optional]  # noqa: E501
            country_result (str): Specifies the result code for the country.. [optional]  # noqa: E501
            country_level (str): Specifies the category of address matching available.. [optional]  # noqa: E501
            firm_name_input (str): Specifies the validated firm or company name.. [optional]  # noqa: E501
            firm_name_result (str): Specifies if the firm name got validated.. [optional]  # noqa: E501
            house_number (str): Specifies the house number.. [optional]  # noqa: E501
            house_number_input (str): Specifies the house number.. [optional]  # noqa: E501
            house_number_result (str): Specifies the result for house number.. [optional]  # noqa: E501
            leading_directional (str): Specifies the leading directional.. [optional]  # noqa: E501
            leading_directional_input (str): Specifies the leading directional.. [optional]  # noqa: E501
            leading_directional_result (str): Specifies the result of leading directional.. [optional]  # noqa: E501
            multiple_matches (str): Specifies the address component with multiple matches, if multiple matches were found: . [optional]  # noqa: E501
            po_box (str): Specifies the post office box number.. [optional]  # noqa: E501
            po_box_input (str): Specifies the post office box number.. [optional]  # noqa: E501
            po_box_result (str): Specifies the result of post office box number.. [optional]  # noqa: E501
            postal_code_input (str): Specifies the validated postal code. For U.S. addresses, this is the ZIP code.. [optional]  # noqa: E501
            postal_code_result (str): Specifies the result of validated postal code.. [optional]  # noqa: E501
            postal_code_source (str): Specifies the result code.. [optional]  # noqa: E501
            postal_code_type (str): Specifies the type of postal code returned.. [optional]  # noqa: E501
            postal_code_city_result (str): Specifies the international result code.. [optional]  # noqa: E501
            private_mailbox (str): Specifies the private mailbox indicator.. [optional]  # noqa: E501
            private_mailbox_input (str): Specifies the private mailbox indicator.. [optional]  # noqa: E501
            private_mailbox_type (str): Specifies the type of private mailbox.. [optional]  # noqa: E501
            private_mailbox_type_input (str): Specifies the type of private mailbox.. [optional]  # noqa: E501
            record_type (str): Specifies the type of address record, as defined by U.S. and Canadian postal authorities.. [optional]  # noqa: E501
            record_type_default (str): Specifies the code indicating the default match.. [optional]  # noqa: E501
            rrhc (str): Specifies the Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_input (str): Specifies the Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_result (str): Specifies the result for Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_type (str): Specifies the result code for Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            state_province_input (str): Specifies the validated state or province abbreviation.. [optional]  # noqa: E501
            state_province_result (str): Specifies the result of validated state or province abbreviation.. [optional]  # noqa: E501
            street_result (str): Specifies the result codes for international addresses.. [optional]  # noqa: E501
            street_name (str): Specifies the street name.. [optional]  # noqa: E501
            street_name_alias_type (str): Specifies result code that applies to U.S. addresses only.. [optional]  # noqa: E501
            street_name_input (str): Specifies the street name.. [optional]  # noqa: E501
            street_name_result (str): Specifies the result of the street name.. [optional]  # noqa: E501
            street_name_abbreviated_alias_result (str): Indicates the result of abbreviated alias processing.. [optional]  # noqa: E501
            street_name_preferred_alias_result (str): Specifies the result of preferred alias processing.. [optional]  # noqa: E501
            street_suffix (str): Specifies the street suffix.. [optional]  # noqa: E501
            street_suffix_input (str): Specifies the street suffix.. [optional]  # noqa: E501
            street_suffix_result (str): Specifies the result of the street suffix.. [optional]  # noqa: E501
            trailing_directional (str): Specifies the trailing directional.. [optional]  # noqa: E501
            trailing_directional_input (str): Specifies the trailing directional.. [optional]  # noqa: E501
            trailing_directional_result (str): Specifies the result of the trailing directional.. [optional]  # noqa: E501
            match_score (str): Specifies an indication of the degree to which the output address is correct.. [optional]  # noqa: E501
            uslacs (str): Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).. [optional]  # noqa: E501
            uslacs_return_code (str): Specifies the the success or failure of LACS processing. This is for U.S. addresses only).. [optional]  # noqa: E501
            rdi (str): Specifies the values indicating address type.. [optional]  # noqa: E501
            cmra (str): Specifies if the address is a Commercial Mail Receiving Agency (CMRA).. [optional]  # noqa: E501
            dpv (str): Specifies the results of Delivery Point Validation (DPV) processing.. [optional]  # noqa: E501
            dpv_footnote (str): Specifies the DPV footnote codes.. [optional]  # noqa: E501
            suite_link_return_code (str): Indicates whether or not API corrected the secondary address information (U.S. addresses only). . [optional]  # noqa: E501
            suite_link_match_code (str): Provides additional information on the SuiteLink match attempt. (U.S. addresses only). [optional]  # noqa: E501
            suite_link_fidelity (str): Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.. [optional]  # noqa: E501
            usbc_check_digit (str): Specifies the check-digit portion of the 11-digit delivery point barcode.. [optional]  # noqa: E501
            postal_bar_code (str): Specifies the delivery point portion of the delivery point barcode.. [optional]  # noqa: E501
            us_carrier_route_code (str): Specifies carrier route code.. [optional]  # noqa: E501
            usfips_county_number (str): Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).. [optional]  # noqa: E501
            us_county_name (str): Specifies the county name (U.S. addresses only).. [optional]  # noqa: E501
            us_congressional_district (str): Specifies congressional district (U.S. addresses only).. [optional]  # noqa: E501
            us_alt_addr (str): Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).. [optional]  # noqa: E501
            us_last_line_number (str): Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.. [optional]  # noqa: E501
            us_finance_number (str): Specifies the finance number in which the address resides (U.S. addresses only).. [optional]  # noqa: E501
            us_urban_name (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            us_urban_name_input (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            us_urban_name_result (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            multimatch_count (str): If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.. [optional]  # noqa: E501
            address_block1 (str): AddressBlock1. [optional]  # noqa: E501
            address_block2 (str): AddressBlock2. [optional]  # noqa: E501
            address_block3 (str): AddressBlock3. [optional]  # noqa: E501
            address_block4 (str): AddressBlock4. [optional]  # noqa: E501
            address_block5 (str): AddressBlock5. [optional]  # noqa: E501
            address_block6 (str): AddressBlock6. [optional]  # noqa: E501
            address_block7 (str): AddressBlock7. [optional]  # noqa: E501
            address_block8 (str): AddressBlock8. [optional]  # noqa: E501
            address_block9 (str): AddressBlock9. [optional]  # noqa: E501
            can_language (str): Specifies whether the address is in English or French. This is for Canadian address only.. [optional]  # noqa: E501
            dpvno_stat (str): Specifies whether the building is a no stat building and therefore unable to receive mail.. [optional]  # noqa: E501
            dpv_vacant (str): Specifies whether the building is vacant, unoccupied for 90 days.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ValidateMailingAddressUSCANAPIOutput - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            user_fields ([GetPostalCodesAPIOutputUserFields]): These fields are returned, unmodified, in the user_fields section of the response.. [optional]  # noqa: E501
            status (str): Reports the success or failure of the match attempt.. [optional]  # noqa: E501
            status_code (str): Reason for failure, if there is one.. [optional]  # noqa: E501
            status_description (str): Specifies the description of the problem, if there is one.. [optional]  # noqa: E501
            address_line1 (str): Specifies the first line of the validated and standardized address.. [optional]  # noqa: E501
            address_line2 (str): Specifies the second line of the validated and standardized address.. [optional]  # noqa: E501
            city (str): Specifies the validated city name.. [optional]  # noqa: E501
            state_province (str): Specifies the validated state or province abbreviation.. [optional]  # noqa: E501
            postal_code (str): Specifies the validated ZIP Code or postal code.. [optional]  # noqa: E501
            country (str): Specifies the country in the format determined by the selection from ISO or UPO or English.. [optional]  # noqa: E501
            firm_name (str): Specifies the validated firm or company name.. [optional]  # noqa: E501
            block_address (str): Specifies the formatted address, as it would appear on a physical mail piece. . [optional]  # noqa: E501
            postal_code_base (str): Specifies the 5-digit ZIP Code.. [optional]  # noqa: E501
            postal_code_add_on (str): Specifies the 4-digit add-on part of the ZIP Code.. [optional]  # noqa: E501
            additional_input_data (str): Specifies input data not used by the address validation process.. [optional]  # noqa: E501
            could_not_validate (str): Specifies the address component that could not be validated, in case no match is found. . [optional]  # noqa: E501
            address_format (str): Specifies the type of address data being returned.. [optional]  # noqa: E501
            address_line3 (str): Specifies the third line of the validated and standardized address. If the address could not be validated, the third line of the input address without any changes.. [optional]  # noqa: E501
            address_line4 (str): Specifies the fourth line of the validated and standardized address. If the address could not be validated, the fourth line of the input address without any changes.. [optional]  # noqa: E501
            address_record_result (str): Specifies the result codes that apply to international addresses only.. [optional]  # noqa: E501
            apartment_label (str): Specifies the apartment designator such as STE or APT.. [optional]  # noqa: E501
            apartment_label_input (str): Specifies the apartment designator such as STE or APT.. [optional]  # noqa: E501
            apartment_label_result (str): Specifies the result of apartment label.. [optional]  # noqa: E501
            apartment_number (str): Specifies the apartment number.. [optional]  # noqa: E501
            apartment_number_input (str): Specifies the apartment number.. [optional]  # noqa: E501
            apartment_number_result (str): Specifies the result of apartment number.. [optional]  # noqa: E501
            city_input (str): Specifies the validated city name.. [optional]  # noqa: E501
            city_result (str): Specifies the result of the validated city name.. [optional]  # noqa: E501
            confidence (str): Specifies the the level of confidence assigned to the address being returned.. [optional]  # noqa: E501
            country_input (str): Specifies the name of the country.. [optional]  # noqa: E501
            country_result (str): Specifies the result code for the country.. [optional]  # noqa: E501
            country_level (str): Specifies the category of address matching available.. [optional]  # noqa: E501
            firm_name_input (str): Specifies the validated firm or company name.. [optional]  # noqa: E501
            firm_name_result (str): Specifies if the firm name got validated.. [optional]  # noqa: E501
            house_number (str): Specifies the house number.. [optional]  # noqa: E501
            house_number_input (str): Specifies the house number.. [optional]  # noqa: E501
            house_number_result (str): Specifies the result for house number.. [optional]  # noqa: E501
            leading_directional (str): Specifies the leading directional.. [optional]  # noqa: E501
            leading_directional_input (str): Specifies the leading directional.. [optional]  # noqa: E501
            leading_directional_result (str): Specifies the result of leading directional.. [optional]  # noqa: E501
            multiple_matches (str): Specifies the address component with multiple matches, if multiple matches were found: . [optional]  # noqa: E501
            po_box (str): Specifies the post office box number.. [optional]  # noqa: E501
            po_box_input (str): Specifies the post office box number.. [optional]  # noqa: E501
            po_box_result (str): Specifies the result of post office box number.. [optional]  # noqa: E501
            postal_code_input (str): Specifies the validated postal code. For U.S. addresses, this is the ZIP code.. [optional]  # noqa: E501
            postal_code_result (str): Specifies the result of validated postal code.. [optional]  # noqa: E501
            postal_code_source (str): Specifies the result code.. [optional]  # noqa: E501
            postal_code_type (str): Specifies the type of postal code returned.. [optional]  # noqa: E501
            postal_code_city_result (str): Specifies the international result code.. [optional]  # noqa: E501
            private_mailbox (str): Specifies the private mailbox indicator.. [optional]  # noqa: E501
            private_mailbox_input (str): Specifies the private mailbox indicator.. [optional]  # noqa: E501
            private_mailbox_type (str): Specifies the type of private mailbox.. [optional]  # noqa: E501
            private_mailbox_type_input (str): Specifies the type of private mailbox.. [optional]  # noqa: E501
            record_type (str): Specifies the type of address record, as defined by U.S. and Canadian postal authorities.. [optional]  # noqa: E501
            record_type_default (str): Specifies the code indicating the default match.. [optional]  # noqa: E501
            rrhc (str): Specifies the Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_input (str): Specifies the Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_result (str): Specifies the result for Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            rrhc_type (str): Specifies the result code for Rural Route/Highway Contract indicator.. [optional]  # noqa: E501
            state_province_input (str): Specifies the validated state or province abbreviation.. [optional]  # noqa: E501
            state_province_result (str): Specifies the result of validated state or province abbreviation.. [optional]  # noqa: E501
            street_result (str): Specifies the result codes for international addresses.. [optional]  # noqa: E501
            street_name (str): Specifies the street name.. [optional]  # noqa: E501
            street_name_alias_type (str): Specifies result code that applies to U.S. addresses only.. [optional]  # noqa: E501
            street_name_input (str): Specifies the street name.. [optional]  # noqa: E501
            street_name_result (str): Specifies the result of the street name.. [optional]  # noqa: E501
            street_name_abbreviated_alias_result (str): Indicates the result of abbreviated alias processing.. [optional]  # noqa: E501
            street_name_preferred_alias_result (str): Specifies the result of preferred alias processing.. [optional]  # noqa: E501
            street_suffix (str): Specifies the street suffix.. [optional]  # noqa: E501
            street_suffix_input (str): Specifies the street suffix.. [optional]  # noqa: E501
            street_suffix_result (str): Specifies the result of the street suffix.. [optional]  # noqa: E501
            trailing_directional (str): Specifies the trailing directional.. [optional]  # noqa: E501
            trailing_directional_input (str): Specifies the trailing directional.. [optional]  # noqa: E501
            trailing_directional_result (str): Specifies the result of the trailing directional.. [optional]  # noqa: E501
            match_score (str): Specifies an indication of the degree to which the output address is correct.. [optional]  # noqa: E501
            uslacs (str): Specifies whether the address is a candidate for LACS conversion. This is for U.S. addresses only).. [optional]  # noqa: E501
            uslacs_return_code (str): Specifies the the success or failure of LACS processing. This is for U.S. addresses only).. [optional]  # noqa: E501
            rdi (str): Specifies the values indicating address type.. [optional]  # noqa: E501
            cmra (str): Specifies if the address is a Commercial Mail Receiving Agency (CMRA).. [optional]  # noqa: E501
            dpv (str): Specifies the results of Delivery Point Validation (DPV) processing.. [optional]  # noqa: E501
            dpv_footnote (str): Specifies the DPV footnote codes.. [optional]  # noqa: E501
            suite_link_return_code (str): Indicates whether or not API corrected the secondary address information (U.S. addresses only). . [optional]  # noqa: E501
            suite_link_match_code (str): Provides additional information on the SuiteLink match attempt. (U.S. addresses only). [optional]  # noqa: E501
            suite_link_fidelity (str): Indicates how well ValidateAddress matched the firm name to the firm names in the SuiteLink database.. [optional]  # noqa: E501
            usbc_check_digit (str): Specifies the check-digit portion of the 11-digit delivery point barcode.. [optional]  # noqa: E501
            postal_bar_code (str): Specifies the delivery point portion of the delivery point barcode.. [optional]  # noqa: E501
            us_carrier_route_code (str): Specifies carrier route code.. [optional]  # noqa: E501
            usfips_county_number (str): Specifies FIPS (Federal Information Processing Standards) county number (U.S. addresses only).. [optional]  # noqa: E501
            us_county_name (str): Specifies the county name (U.S. addresses only).. [optional]  # noqa: E501
            us_congressional_district (str): Specifies congressional district (U.S. addresses only).. [optional]  # noqa: E501
            us_alt_addr (str): Specifies whether the alternate address matching logic was used, and if so which logic was used (U.S. addresses only).. [optional]  # noqa: E501
            us_last_line_number (str): Specifies a six-character alphanumeric value that groups together ZIP Codes that share the same primary city.. [optional]  # noqa: E501
            us_finance_number (str): Specifies the finance number in which the address resides (U.S. addresses only).. [optional]  # noqa: E501
            us_urban_name (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            us_urban_name_input (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            us_urban_name_result (str): U.S. address urbanization name. Used primarily for Puerto Rico addresses.. [optional]  # noqa: E501
            multimatch_count (str): If the address was matched to multiple candidate addresses in the reference data, this field contains the number of candidate matches found.. [optional]  # noqa: E501
            address_block1 (str): AddressBlock1. [optional]  # noqa: E501
            address_block2 (str): AddressBlock2. [optional]  # noqa: E501
            address_block3 (str): AddressBlock3. [optional]  # noqa: E501
            address_block4 (str): AddressBlock4. [optional]  # noqa: E501
            address_block5 (str): AddressBlock5. [optional]  # noqa: E501
            address_block6 (str): AddressBlock6. [optional]  # noqa: E501
            address_block7 (str): AddressBlock7. [optional]  # noqa: E501
            address_block8 (str): AddressBlock8. [optional]  # noqa: E501
            address_block9 (str): AddressBlock9. [optional]  # noqa: E501
            can_language (str): Specifies whether the address is in English or French. This is for Canadian address only.. [optional]  # noqa: E501
            dpvno_stat (str): Specifies whether the building is a no stat building and therefore unable to receive mail.. [optional]  # noqa: E501
            dpv_vacant (str): Specifies whether the building is vacant, unoccupied for 90 days.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
