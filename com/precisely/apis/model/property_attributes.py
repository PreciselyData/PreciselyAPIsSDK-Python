"""
    Precisely APIs

    Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.  # noqa: E501

    The version of the OpenAPI document: 12.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from com.precisely.apis.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from com.precisely.apis.exceptions import ApiAttributeError


def lazy_import():
    from com.precisely.apis.model.absentee_owner import AbsenteeOwner
    from com.precisely.apis.model.amenities import Amenities
    from com.precisely.apis.model.basement_type import BasementType
    from com.precisely.apis.model.buildg_class import BuildgClass
    from com.precisely.apis.model.buildg_condition import BuildgCondition
    from com.precisely.apis.model.buildg_features_sqft import BuildgFeaturesSqft
    from com.precisely.apis.model.buildg_improve_area import BuildgImproveArea
    from com.precisely.apis.model.buildg_improve_type import BuildgImproveType
    from com.precisely.apis.model.buildg_quality import BuildgQuality
    from com.precisely.apis.model.buildg_style import BuildgStyle
    from com.precisely.apis.model.buildg_type import BuildgType
    from com.precisely.apis.model.buildg_view import BuildgView
    from com.precisely.apis.model.building_sqft_source import BuildingSqftSource
    from com.precisely.apis.model.ca_exemptions import CaExemptions
    from com.precisely.apis.model.construction import Construction
    from com.precisely.apis.model.cooling_type import CoolingType
    from com.precisely.apis.model.energy_type import EnergyType
    from com.precisely.apis.model.exterior_walls import ExteriorWalls
    from com.precisely.apis.model.extra_feature_sqft import ExtraFeatureSqft
    from com.precisely.apis.model.fireplace_type import FireplaceType
    from com.precisely.apis.model.floor_type import FloorType
    from com.precisely.apis.model.formatted_tax_address import FormattedTaxAddress
    from com.precisely.apis.model.foundation import Foundation
    from com.precisely.apis.model.fuel_type import FuelType
    from com.precisely.apis.model.garage_type import GarageType
    from com.precisely.apis.model.heating_type import HeatingType
    from com.precisely.apis.model.interior_wall import InteriorWall
    from com.precisely.apis.model.land_use import LandUse
    from com.precisely.apis.model.loc_code import LocCode
    from com.precisely.apis.model.other_rooms import OtherRooms
    from com.precisely.apis.model.owner_vest_type import OwnerVestType
    from com.precisely.apis.model.owners import Owners
    from com.precisely.apis.model.pool_type import PoolType
    from com.precisely.apis.model.prior_sale_code import PriorSaleCode
    from com.precisely.apis.model.prop_site_influene import PropSiteInfluene
    from com.precisely.apis.model.property_geometry import PropertyGeometry
    from com.precisely.apis.model.roof_cover_type import RoofCoverType
    from com.precisely.apis.model.roof_frame_type import RoofFrameType
    from com.precisely.apis.model.roof_shape_type import RoofShapeType
    from com.precisely.apis.model.situs_address import SitusAddress
    from com.precisely.apis.model.stories import Stories
    from com.precisely.apis.model.tax_doc_type import TaxDocType
    from com.precisely.apis.model.tax_exemption import TaxExemption
    from com.precisely.apis.model.tax_sales_price_code import TaxSalesPriceCode
    from com.precisely.apis.model.vacancy import Vacancy
    globals()['AbsenteeOwner'] = AbsenteeOwner
    globals()['Amenities'] = Amenities
    globals()['BasementType'] = BasementType
    globals()['BuildgClass'] = BuildgClass
    globals()['BuildgCondition'] = BuildgCondition
    globals()['BuildgFeaturesSqft'] = BuildgFeaturesSqft
    globals()['BuildgImproveArea'] = BuildgImproveArea
    globals()['BuildgImproveType'] = BuildgImproveType
    globals()['BuildgQuality'] = BuildgQuality
    globals()['BuildgStyle'] = BuildgStyle
    globals()['BuildgType'] = BuildgType
    globals()['BuildgView'] = BuildgView
    globals()['BuildingSqftSource'] = BuildingSqftSource
    globals()['CaExemptions'] = CaExemptions
    globals()['Construction'] = Construction
    globals()['CoolingType'] = CoolingType
    globals()['EnergyType'] = EnergyType
    globals()['ExteriorWalls'] = ExteriorWalls
    globals()['ExtraFeatureSqft'] = ExtraFeatureSqft
    globals()['FireplaceType'] = FireplaceType
    globals()['FloorType'] = FloorType
    globals()['FormattedTaxAddress'] = FormattedTaxAddress
    globals()['Foundation'] = Foundation
    globals()['FuelType'] = FuelType
    globals()['GarageType'] = GarageType
    globals()['HeatingType'] = HeatingType
    globals()['InteriorWall'] = InteriorWall
    globals()['LandUse'] = LandUse
    globals()['LocCode'] = LocCode
    globals()['OtherRooms'] = OtherRooms
    globals()['OwnerVestType'] = OwnerVestType
    globals()['Owners'] = Owners
    globals()['PoolType'] = PoolType
    globals()['PriorSaleCode'] = PriorSaleCode
    globals()['PropSiteInfluene'] = PropSiteInfluene
    globals()['PropertyGeometry'] = PropertyGeometry
    globals()['RoofCoverType'] = RoofCoverType
    globals()['RoofFrameType'] = RoofFrameType
    globals()['RoofShapeType'] = RoofShapeType
    globals()['SitusAddress'] = SitusAddress
    globals()['Stories'] = Stories
    globals()['TaxDocType'] = TaxDocType
    globals()['TaxExemption'] = TaxExemption
    globals()['TaxSalesPriceCode'] = TaxSalesPriceCode
    globals()['Vacancy'] = Vacancy


class PropertyAttributes(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'pb_key': (str,),  # noqa: E501
            'prop_apn': (str,),  # noqa: E501
            'prop_type': (str,),  # noqa: E501
            'prop_sq_ft': (str,),  # noqa: E501
            'buildg_sq_ft': (str,),  # noqa: E501
            'buildg_sq_ft_source': (BuildingSqftSource,),  # noqa: E501
            'land_use': (LandUse,),  # noqa: E501
            'construction': (Construction,),  # noqa: E501
            'roof_cover_type': (RoofCoverType,),  # noqa: E501
            'subdivision': (str,),  # noqa: E501
            'geometry': (PropertyGeometry,),  # noqa: E501
            'built_year': (str,),  # noqa: E501
            'bedrooms': (str,),  # noqa: E501
            'baths': (str,),  # noqa: E501
            'partial_baths': (str,),  # noqa: E501
            'bath_fixtures': (str,),  # noqa: E501
            'pool': (str,),  # noqa: E501
            'pool_type': (PoolType,),  # noqa: E501
            'fireplace': (str,),  # noqa: E501
            'fireplace_type': (FireplaceType,),  # noqa: E501
            'mobile_home': (str,),  # noqa: E501
            'heating_type': (HeatingType,),  # noqa: E501
            'cooling_type': (CoolingType,),  # noqa: E501
            'assessed_value': (str,),  # noqa: E501
            'market_value': (str,),  # noqa: E501
            'appraised_value': (str,),  # noqa: E501
            'tax_amount': (str,),  # noqa: E501
            'tax_exemptions': ([TaxExemption],),  # noqa: E501
            'ca_exemptions': (CaExemptions,),  # noqa: E501
            'sales_date': (str,),  # noqa: E501
            'prior_sale_date': (str,),  # noqa: E501
            'prior_sales_price': (str,),  # noqa: E501
            'prior_sale_doc_type': (str,),  # noqa: E501
            'prior_sale_code': (PriorSaleCode,),  # noqa: E501
            'prior_sale_folio_number': (str,),  # noqa: E501
            'prior_sale_page_number': (str,),  # noqa: E501
            'prior_sale_doc_number': (str,),  # noqa: E501
            'stories': (Stories,),  # noqa: E501
            'living_sq_ft': (str,),  # noqa: E501
            'roof_frame_type': (RoofFrameType,),  # noqa: E501
            'foundation': (Foundation,),  # noqa: E501
            'buildg_condition': (BuildgCondition,),  # noqa: E501
            'buildg_count': (str,),  # noqa: E501
            'buildg_unit_no': (str,),  # noqa: E501
            'buildg_features_sq_ft': ([BuildgFeaturesSqft],),  # noqa: E501
            'tax_address': (str,),  # noqa: E501
            'formatted_tax_address': (FormattedTaxAddress,),  # noqa: E501
            'situs_address': (SitusAddress,),  # noqa: E501
            'vacancy': (Vacancy,),  # noqa: E501
            'owners': ([Owners],),  # noqa: E501
            'appraised_value_imp': (str,),  # noqa: E501
            'assessed_value_imp': (str,),  # noqa: E501
            'buildg_type': (BuildgType,),  # noqa: E501
            'basement_type': (BasementType,),  # noqa: E501
            'effective_built_year': (str,),  # noqa: E501
            'exterior_walls': (ExteriorWalls,),  # noqa: E501
            'garage_type': (GarageType,),  # noqa: E501
            'last_updated': (str,),  # noqa: E501
            'market_value_imp': (str,),  # noqa: E501
            'absentee_owner': (AbsenteeOwner,),  # noqa: E501
            'parking_sq_ft': (str,),  # noqa: E501
            'replacement_cost': (str,),  # noqa: E501
            'roof_shape_type': (RoofShapeType,),  # noqa: E501
            'buildg_style': (BuildgStyle,),  # noqa: E501
            'basement_sq_ft': (str,),  # noqa: E501
            'owner_type': (str,),  # noqa: E501
            'owner_vest_type': (OwnerVestType,),  # noqa: E501
            'elevator': (str,),  # noqa: E501
            'prop_apn_sequence': (str,),  # noqa: E501
            'fips_code': (str,),  # noqa: E501
            'prop_zoning': (str,),  # noqa: E501
            'loc_code': (LocCode,),  # noqa: E501
            'legal_map_ref': (str,),  # noqa: E501
            'legal_assessor_desc': (str,),  # noqa: E501
            'legal_full_desc': (str,),  # noqa: E501
            'legal_lot_code': (str,),  # noqa: E501
            'legal_lot_number': (str,),  # noqa: E501
            'legal_land_lot': (str,),  # noqa: E501
            'legal_tract_number': (str,),  # noqa: E501
            'legal_block': (str,),  # noqa: E501
            'legal_section': (str,),  # noqa: E501
            'legal_district': (str,),  # noqa: E501
            'legal_unit_number': (str,),  # noqa: E501
            'legal_phase_number': (str,),  # noqa: E501
            'legal_sub_name': (str,),  # noqa: E501
            'legal_town_muni_name': (str,),  # noqa: E501
            'legal_section_township_range': (str,),  # noqa: E501
            'prop_acres': (str,),  # noqa: E501
            'prop_front_footage': (str,),  # noqa: E501
            'prop_depth_footage': (str,),  # noqa: E501
            'buildg_view': (BuildgView,),  # noqa: E501
            'prop_site_influene': (PropSiteInfluene,),  # noqa: E501
            'buildg_name': (str,),  # noqa: E501
            'buildg_quality': (BuildgQuality,),  # noqa: E501
            'buildg_improve_type': (BuildgImproveType,),  # noqa: E501
            'gross_sqft': (str,),  # noqa: E501
            'adj_gross_sqft': (str,),  # noqa: E501
            'buildg_class': (BuildgClass,),  # noqa: E501
            'interior_wall': (InteriorWall,),  # noqa: E501
            'floor_type': (FloorType,),  # noqa: E501
            'rooms': (str,),  # noqa: E501
            'other_rooms': (OtherRooms,),  # noqa: E501
            'plumbing_fixtures': (str,),  # noqa: E501
            'parking_capacity': (str,),  # noqa: E501
            'energy_type': (EnergyType,),  # noqa: E501
            'fuel_type': (FuelType,),  # noqa: E501
            'sewer_type': (str,),  # noqa: E501
            'water_type': (str,),  # noqa: E501
            'amenities': (Amenities,),  # noqa: E501
            'extra_feature_sqft': ([ExtraFeatureSqft],),  # noqa: E501
            'buildg_improve_area': ([BuildgImproveArea],),  # noqa: E501
            'tax_account_number': (str,),  # noqa: E501
            'tax_tape_cut_date': (str,),  # noqa: E501
            'tax_doc_type': (TaxDocType,),  # noqa: E501
            'tax_sales_price': (str,),  # noqa: E501
            'tax_sales_price_code': (TaxSalesPriceCode,),  # noqa: E501
            'rec_book_number': (str,),  # noqa: E501
            'rec_page_number': (str,),  # noqa: E501
            'rec_doc_number': (str,),  # noqa: E501
            'tax_year': (str,),  # noqa: E501
            'tax_del_year': (str,),  # noqa: E501
            'assessed_year': (str,),  # noqa: E501
            'assessed_land_value': (str,),  # noqa: E501
            'market_value_year': (str,),  # noqa: E501
            'market_value_land': (str,),  # noqa: E501
            'appraised_value_land': (str,),  # noqa: E501
            'tax_rate_code': (str,),  # noqa: E501
            'prop_link_id': (str,),  # noqa: E501
            'geo_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'pb_key': 'pbKey',  # noqa: E501
        'prop_apn': 'propApn',  # noqa: E501
        'prop_type': 'propType',  # noqa: E501
        'prop_sq_ft': 'propSqFt',  # noqa: E501
        'buildg_sq_ft': 'buildgSqFt',  # noqa: E501
        'buildg_sq_ft_source': 'buildgSqFtSource',  # noqa: E501
        'land_use': 'landUse',  # noqa: E501
        'construction': 'construction',  # noqa: E501
        'roof_cover_type': 'roofCoverType',  # noqa: E501
        'subdivision': 'subdivision',  # noqa: E501
        'geometry': 'geometry',  # noqa: E501
        'built_year': 'builtYear',  # noqa: E501
        'bedrooms': 'bedrooms',  # noqa: E501
        'baths': 'baths',  # noqa: E501
        'partial_baths': 'partialBaths',  # noqa: E501
        'bath_fixtures': 'bathFixtures',  # noqa: E501
        'pool': 'pool',  # noqa: E501
        'pool_type': 'poolType',  # noqa: E501
        'fireplace': 'fireplace',  # noqa: E501
        'fireplace_type': 'fireplaceType',  # noqa: E501
        'mobile_home': 'mobileHome',  # noqa: E501
        'heating_type': 'heatingType',  # noqa: E501
        'cooling_type': 'coolingType',  # noqa: E501
        'assessed_value': 'assessedValue',  # noqa: E501
        'market_value': 'marketValue',  # noqa: E501
        'appraised_value': 'appraisedValue',  # noqa: E501
        'tax_amount': 'taxAmount',  # noqa: E501
        'tax_exemptions': 'taxExemptions',  # noqa: E501
        'ca_exemptions': 'caExemptions',  # noqa: E501
        'sales_date': 'salesDate',  # noqa: E501
        'prior_sale_date': 'priorSaleDate',  # noqa: E501
        'prior_sales_price': 'priorSalesPrice',  # noqa: E501
        'prior_sale_doc_type': 'priorSaleDocType',  # noqa: E501
        'prior_sale_code': 'priorSaleCode',  # noqa: E501
        'prior_sale_folio_number': 'priorSaleFolioNumber',  # noqa: E501
        'prior_sale_page_number': 'priorSalePageNumber',  # noqa: E501
        'prior_sale_doc_number': 'priorSaleDocNumber',  # noqa: E501
        'stories': 'stories',  # noqa: E501
        'living_sq_ft': 'livingSqFt',  # noqa: E501
        'roof_frame_type': 'roofFrameType',  # noqa: E501
        'foundation': 'foundation',  # noqa: E501
        'buildg_condition': 'buildgCondition',  # noqa: E501
        'buildg_count': 'buildgCount',  # noqa: E501
        'buildg_unit_no': 'buildgUnitNo',  # noqa: E501
        'buildg_features_sq_ft': 'buildgFeaturesSqFt',  # noqa: E501
        'tax_address': 'taxAddress',  # noqa: E501
        'formatted_tax_address': 'formattedTaxAddress',  # noqa: E501
        'situs_address': 'situsAddress',  # noqa: E501
        'vacancy': 'vacancy',  # noqa: E501
        'owners': 'owners',  # noqa: E501
        'appraised_value_imp': 'appraisedValueImp',  # noqa: E501
        'assessed_value_imp': 'assessedValueImp',  # noqa: E501
        'buildg_type': 'buildgType',  # noqa: E501
        'basement_type': 'basementType',  # noqa: E501
        'effective_built_year': 'effectiveBuiltYear',  # noqa: E501
        'exterior_walls': 'exteriorWalls',  # noqa: E501
        'garage_type': 'garageType',  # noqa: E501
        'last_updated': 'lastUpdated',  # noqa: E501
        'market_value_imp': 'marketValueImp',  # noqa: E501
        'absentee_owner': 'absenteeOwner',  # noqa: E501
        'parking_sq_ft': 'parkingSqFt',  # noqa: E501
        'replacement_cost': 'replacementCost',  # noqa: E501
        'roof_shape_type': 'roofShapeType',  # noqa: E501
        'buildg_style': 'buildgStyle',  # noqa: E501
        'basement_sq_ft': 'basementSqFt',  # noqa: E501
        'owner_type': 'ownerType',  # noqa: E501
        'owner_vest_type': 'ownerVestType',  # noqa: E501
        'elevator': 'elevator',  # noqa: E501
        'prop_apn_sequence': 'propApnSequence',  # noqa: E501
        'fips_code': 'fipsCode',  # noqa: E501
        'prop_zoning': 'propZoning',  # noqa: E501
        'loc_code': 'locCode',  # noqa: E501
        'legal_map_ref': 'legalMapRef',  # noqa: E501
        'legal_assessor_desc': 'legalAssessorDesc',  # noqa: E501
        'legal_full_desc': 'legalFullDesc',  # noqa: E501
        'legal_lot_code': 'legalLotCode',  # noqa: E501
        'legal_lot_number': 'legalLotNumber',  # noqa: E501
        'legal_land_lot': 'legalLandLot',  # noqa: E501
        'legal_tract_number': 'legalTractNumber',  # noqa: E501
        'legal_block': 'legalBlock',  # noqa: E501
        'legal_section': 'legalSection',  # noqa: E501
        'legal_district': 'legalDistrict',  # noqa: E501
        'legal_unit_number': 'legalUnitNumber',  # noqa: E501
        'legal_phase_number': 'legalPhaseNumber',  # noqa: E501
        'legal_sub_name': 'legalSubName',  # noqa: E501
        'legal_town_muni_name': 'legalTownMuniName',  # noqa: E501
        'legal_section_township_range': 'legalSectionTownshipRange',  # noqa: E501
        'prop_acres': 'propAcres',  # noqa: E501
        'prop_front_footage': 'propFrontFootage',  # noqa: E501
        'prop_depth_footage': 'propDepthFootage',  # noqa: E501
        'buildg_view': 'buildgView',  # noqa: E501
        'prop_site_influene': 'propSiteInfluene',  # noqa: E501
        'buildg_name': 'buildgName',  # noqa: E501
        'buildg_quality': 'buildgQuality',  # noqa: E501
        'buildg_improve_type': 'buildgImproveType',  # noqa: E501
        'gross_sqft': 'grossSqft',  # noqa: E501
        'adj_gross_sqft': 'adjGrossSqft',  # noqa: E501
        'buildg_class': 'buildgClass',  # noqa: E501
        'interior_wall': 'interiorWall',  # noqa: E501
        'floor_type': 'floorType',  # noqa: E501
        'rooms': 'rooms',  # noqa: E501
        'other_rooms': 'otherRooms',  # noqa: E501
        'plumbing_fixtures': 'plumbingFixtures',  # noqa: E501
        'parking_capacity': 'parkingCapacity',  # noqa: E501
        'energy_type': 'energyType',  # noqa: E501
        'fuel_type': 'fuelType',  # noqa: E501
        'sewer_type': 'sewerType',  # noqa: E501
        'water_type': 'waterType',  # noqa: E501
        'amenities': 'amenities',  # noqa: E501
        'extra_feature_sqft': 'extraFeatureSqft',  # noqa: E501
        'buildg_improve_area': 'buildgImproveArea',  # noqa: E501
        'tax_account_number': 'taxAccountNumber',  # noqa: E501
        'tax_tape_cut_date': 'taxTapeCutDate',  # noqa: E501
        'tax_doc_type': 'taxDocType',  # noqa: E501
        'tax_sales_price': 'taxSalesPrice',  # noqa: E501
        'tax_sales_price_code': 'taxSalesPriceCode',  # noqa: E501
        'rec_book_number': 'recBookNumber',  # noqa: E501
        'rec_page_number': 'recPageNumber',  # noqa: E501
        'rec_doc_number': 'recDocNumber',  # noqa: E501
        'tax_year': 'taxYear',  # noqa: E501
        'tax_del_year': 'taxDelYear',  # noqa: E501
        'assessed_year': 'assessedYear',  # noqa: E501
        'assessed_land_value': 'assessedLandValue',  # noqa: E501
        'market_value_year': 'marketValueYear',  # noqa: E501
        'market_value_land': 'marketValueLand',  # noqa: E501
        'appraised_value_land': 'appraisedValueLand',  # noqa: E501
        'tax_rate_code': 'taxRateCode',  # noqa: E501
        'prop_link_id': 'propLinkId',  # noqa: E501
        'geo_id': 'geoId',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PropertyAttributes - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pb_key (str): [optional]  # noqa: E501
            prop_apn (str): [optional]  # noqa: E501
            prop_type (str): [optional]  # noqa: E501
            prop_sq_ft (str): [optional]  # noqa: E501
            buildg_sq_ft (str): [optional]  # noqa: E501
            buildg_sq_ft_source (BuildingSqftSource): [optional]  # noqa: E501
            land_use (LandUse): [optional]  # noqa: E501
            construction (Construction): [optional]  # noqa: E501
            roof_cover_type (RoofCoverType): [optional]  # noqa: E501
            subdivision (str): [optional]  # noqa: E501
            geometry (PropertyGeometry): [optional]  # noqa: E501
            built_year (str): [optional]  # noqa: E501
            bedrooms (str): [optional]  # noqa: E501
            baths (str): [optional]  # noqa: E501
            partial_baths (str): [optional]  # noqa: E501
            bath_fixtures (str): [optional]  # noqa: E501
            pool (str): [optional]  # noqa: E501
            pool_type (PoolType): [optional]  # noqa: E501
            fireplace (str): [optional]  # noqa: E501
            fireplace_type (FireplaceType): [optional]  # noqa: E501
            mobile_home (str): [optional]  # noqa: E501
            heating_type (HeatingType): [optional]  # noqa: E501
            cooling_type (CoolingType): [optional]  # noqa: E501
            assessed_value (str): [optional]  # noqa: E501
            market_value (str): [optional]  # noqa: E501
            appraised_value (str): [optional]  # noqa: E501
            tax_amount (str): [optional]  # noqa: E501
            tax_exemptions ([TaxExemption]): [optional]  # noqa: E501
            ca_exemptions (CaExemptions): [optional]  # noqa: E501
            sales_date (str): [optional]  # noqa: E501
            prior_sale_date (str): [optional]  # noqa: E501
            prior_sales_price (str): [optional]  # noqa: E501
            prior_sale_doc_type (str): [optional]  # noqa: E501
            prior_sale_code (PriorSaleCode): [optional]  # noqa: E501
            prior_sale_folio_number (str): [optional]  # noqa: E501
            prior_sale_page_number (str): [optional]  # noqa: E501
            prior_sale_doc_number (str): [optional]  # noqa: E501
            stories (Stories): [optional]  # noqa: E501
            living_sq_ft (str): [optional]  # noqa: E501
            roof_frame_type (RoofFrameType): [optional]  # noqa: E501
            foundation (Foundation): [optional]  # noqa: E501
            buildg_condition (BuildgCondition): [optional]  # noqa: E501
            buildg_count (str): [optional]  # noqa: E501
            buildg_unit_no (str): [optional]  # noqa: E501
            buildg_features_sq_ft ([BuildgFeaturesSqft]): [optional]  # noqa: E501
            tax_address (str): [optional]  # noqa: E501
            formatted_tax_address (FormattedTaxAddress): [optional]  # noqa: E501
            situs_address (SitusAddress): [optional]  # noqa: E501
            vacancy (Vacancy): [optional]  # noqa: E501
            owners ([Owners]): [optional]  # noqa: E501
            appraised_value_imp (str): [optional]  # noqa: E501
            assessed_value_imp (str): [optional]  # noqa: E501
            buildg_type (BuildgType): [optional]  # noqa: E501
            basement_type (BasementType): [optional]  # noqa: E501
            effective_built_year (str): [optional]  # noqa: E501
            exterior_walls (ExteriorWalls): [optional]  # noqa: E501
            garage_type (GarageType): [optional]  # noqa: E501
            last_updated (str): [optional]  # noqa: E501
            market_value_imp (str): [optional]  # noqa: E501
            absentee_owner (AbsenteeOwner): [optional]  # noqa: E501
            parking_sq_ft (str): [optional]  # noqa: E501
            replacement_cost (str): [optional]  # noqa: E501
            roof_shape_type (RoofShapeType): [optional]  # noqa: E501
            buildg_style (BuildgStyle): [optional]  # noqa: E501
            basement_sq_ft (str): [optional]  # noqa: E501
            owner_type (str): [optional]  # noqa: E501
            owner_vest_type (OwnerVestType): [optional]  # noqa: E501
            elevator (str): [optional]  # noqa: E501
            prop_apn_sequence (str): [optional]  # noqa: E501
            fips_code (str): [optional]  # noqa: E501
            prop_zoning (str): [optional]  # noqa: E501
            loc_code (LocCode): [optional]  # noqa: E501
            legal_map_ref (str): [optional]  # noqa: E501
            legal_assessor_desc (str): [optional]  # noqa: E501
            legal_full_desc (str): [optional]  # noqa: E501
            legal_lot_code (str): [optional]  # noqa: E501
            legal_lot_number (str): [optional]  # noqa: E501
            legal_land_lot (str): [optional]  # noqa: E501
            legal_tract_number (str): [optional]  # noqa: E501
            legal_block (str): [optional]  # noqa: E501
            legal_section (str): [optional]  # noqa: E501
            legal_district (str): [optional]  # noqa: E501
            legal_unit_number (str): [optional]  # noqa: E501
            legal_phase_number (str): [optional]  # noqa: E501
            legal_sub_name (str): [optional]  # noqa: E501
            legal_town_muni_name (str): [optional]  # noqa: E501
            legal_section_township_range (str): [optional]  # noqa: E501
            prop_acres (str): [optional]  # noqa: E501
            prop_front_footage (str): [optional]  # noqa: E501
            prop_depth_footage (str): [optional]  # noqa: E501
            buildg_view (BuildgView): [optional]  # noqa: E501
            prop_site_influene (PropSiteInfluene): [optional]  # noqa: E501
            buildg_name (str): [optional]  # noqa: E501
            buildg_quality (BuildgQuality): [optional]  # noqa: E501
            buildg_improve_type (BuildgImproveType): [optional]  # noqa: E501
            gross_sqft (str): [optional]  # noqa: E501
            adj_gross_sqft (str): [optional]  # noqa: E501
            buildg_class (BuildgClass): [optional]  # noqa: E501
            interior_wall (InteriorWall): [optional]  # noqa: E501
            floor_type (FloorType): [optional]  # noqa: E501
            rooms (str): [optional]  # noqa: E501
            other_rooms (OtherRooms): [optional]  # noqa: E501
            plumbing_fixtures (str): [optional]  # noqa: E501
            parking_capacity (str): [optional]  # noqa: E501
            energy_type (EnergyType): [optional]  # noqa: E501
            fuel_type (FuelType): [optional]  # noqa: E501
            sewer_type (str): [optional]  # noqa: E501
            water_type (str): [optional]  # noqa: E501
            amenities (Amenities): [optional]  # noqa: E501
            extra_feature_sqft ([ExtraFeatureSqft]): [optional]  # noqa: E501
            buildg_improve_area ([BuildgImproveArea]): [optional]  # noqa: E501
            tax_account_number (str): [optional]  # noqa: E501
            tax_tape_cut_date (str): [optional]  # noqa: E501
            tax_doc_type (TaxDocType): [optional]  # noqa: E501
            tax_sales_price (str): [optional]  # noqa: E501
            tax_sales_price_code (TaxSalesPriceCode): [optional]  # noqa: E501
            rec_book_number (str): [optional]  # noqa: E501
            rec_page_number (str): [optional]  # noqa: E501
            rec_doc_number (str): [optional]  # noqa: E501
            tax_year (str): [optional]  # noqa: E501
            tax_del_year (str): [optional]  # noqa: E501
            assessed_year (str): [optional]  # noqa: E501
            assessed_land_value (str): [optional]  # noqa: E501
            market_value_year (str): [optional]  # noqa: E501
            market_value_land (str): [optional]  # noqa: E501
            appraised_value_land (str): [optional]  # noqa: E501
            tax_rate_code (str): [optional]  # noqa: E501
            prop_link_id (str): [optional]  # noqa: E501
            geo_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PropertyAttributes - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pb_key (str): [optional]  # noqa: E501
            prop_apn (str): [optional]  # noqa: E501
            prop_type (str): [optional]  # noqa: E501
            prop_sq_ft (str): [optional]  # noqa: E501
            buildg_sq_ft (str): [optional]  # noqa: E501
            buildg_sq_ft_source (BuildingSqftSource): [optional]  # noqa: E501
            land_use (LandUse): [optional]  # noqa: E501
            construction (Construction): [optional]  # noqa: E501
            roof_cover_type (RoofCoverType): [optional]  # noqa: E501
            subdivision (str): [optional]  # noqa: E501
            geometry (PropertyGeometry): [optional]  # noqa: E501
            built_year (str): [optional]  # noqa: E501
            bedrooms (str): [optional]  # noqa: E501
            baths (str): [optional]  # noqa: E501
            partial_baths (str): [optional]  # noqa: E501
            bath_fixtures (str): [optional]  # noqa: E501
            pool (str): [optional]  # noqa: E501
            pool_type (PoolType): [optional]  # noqa: E501
            fireplace (str): [optional]  # noqa: E501
            fireplace_type (FireplaceType): [optional]  # noqa: E501
            mobile_home (str): [optional]  # noqa: E501
            heating_type (HeatingType): [optional]  # noqa: E501
            cooling_type (CoolingType): [optional]  # noqa: E501
            assessed_value (str): [optional]  # noqa: E501
            market_value (str): [optional]  # noqa: E501
            appraised_value (str): [optional]  # noqa: E501
            tax_amount (str): [optional]  # noqa: E501
            tax_exemptions ([TaxExemption]): [optional]  # noqa: E501
            ca_exemptions (CaExemptions): [optional]  # noqa: E501
            sales_date (str): [optional]  # noqa: E501
            prior_sale_date (str): [optional]  # noqa: E501
            prior_sales_price (str): [optional]  # noqa: E501
            prior_sale_doc_type (str): [optional]  # noqa: E501
            prior_sale_code (PriorSaleCode): [optional]  # noqa: E501
            prior_sale_folio_number (str): [optional]  # noqa: E501
            prior_sale_page_number (str): [optional]  # noqa: E501
            prior_sale_doc_number (str): [optional]  # noqa: E501
            stories (Stories): [optional]  # noqa: E501
            living_sq_ft (str): [optional]  # noqa: E501
            roof_frame_type (RoofFrameType): [optional]  # noqa: E501
            foundation (Foundation): [optional]  # noqa: E501
            buildg_condition (BuildgCondition): [optional]  # noqa: E501
            buildg_count (str): [optional]  # noqa: E501
            buildg_unit_no (str): [optional]  # noqa: E501
            buildg_features_sq_ft ([BuildgFeaturesSqft]): [optional]  # noqa: E501
            tax_address (str): [optional]  # noqa: E501
            formatted_tax_address (FormattedTaxAddress): [optional]  # noqa: E501
            situs_address (SitusAddress): [optional]  # noqa: E501
            vacancy (Vacancy): [optional]  # noqa: E501
            owners ([Owners]): [optional]  # noqa: E501
            appraised_value_imp (str): [optional]  # noqa: E501
            assessed_value_imp (str): [optional]  # noqa: E501
            buildg_type (BuildgType): [optional]  # noqa: E501
            basement_type (BasementType): [optional]  # noqa: E501
            effective_built_year (str): [optional]  # noqa: E501
            exterior_walls (ExteriorWalls): [optional]  # noqa: E501
            garage_type (GarageType): [optional]  # noqa: E501
            last_updated (str): [optional]  # noqa: E501
            market_value_imp (str): [optional]  # noqa: E501
            absentee_owner (AbsenteeOwner): [optional]  # noqa: E501
            parking_sq_ft (str): [optional]  # noqa: E501
            replacement_cost (str): [optional]  # noqa: E501
            roof_shape_type (RoofShapeType): [optional]  # noqa: E501
            buildg_style (BuildgStyle): [optional]  # noqa: E501
            basement_sq_ft (str): [optional]  # noqa: E501
            owner_type (str): [optional]  # noqa: E501
            owner_vest_type (OwnerVestType): [optional]  # noqa: E501
            elevator (str): [optional]  # noqa: E501
            prop_apn_sequence (str): [optional]  # noqa: E501
            fips_code (str): [optional]  # noqa: E501
            prop_zoning (str): [optional]  # noqa: E501
            loc_code (LocCode): [optional]  # noqa: E501
            legal_map_ref (str): [optional]  # noqa: E501
            legal_assessor_desc (str): [optional]  # noqa: E501
            legal_full_desc (str): [optional]  # noqa: E501
            legal_lot_code (str): [optional]  # noqa: E501
            legal_lot_number (str): [optional]  # noqa: E501
            legal_land_lot (str): [optional]  # noqa: E501
            legal_tract_number (str): [optional]  # noqa: E501
            legal_block (str): [optional]  # noqa: E501
            legal_section (str): [optional]  # noqa: E501
            legal_district (str): [optional]  # noqa: E501
            legal_unit_number (str): [optional]  # noqa: E501
            legal_phase_number (str): [optional]  # noqa: E501
            legal_sub_name (str): [optional]  # noqa: E501
            legal_town_muni_name (str): [optional]  # noqa: E501
            legal_section_township_range (str): [optional]  # noqa: E501
            prop_acres (str): [optional]  # noqa: E501
            prop_front_footage (str): [optional]  # noqa: E501
            prop_depth_footage (str): [optional]  # noqa: E501
            buildg_view (BuildgView): [optional]  # noqa: E501
            prop_site_influene (PropSiteInfluene): [optional]  # noqa: E501
            buildg_name (str): [optional]  # noqa: E501
            buildg_quality (BuildgQuality): [optional]  # noqa: E501
            buildg_improve_type (BuildgImproveType): [optional]  # noqa: E501
            gross_sqft (str): [optional]  # noqa: E501
            adj_gross_sqft (str): [optional]  # noqa: E501
            buildg_class (BuildgClass): [optional]  # noqa: E501
            interior_wall (InteriorWall): [optional]  # noqa: E501
            floor_type (FloorType): [optional]  # noqa: E501
            rooms (str): [optional]  # noqa: E501
            other_rooms (OtherRooms): [optional]  # noqa: E501
            plumbing_fixtures (str): [optional]  # noqa: E501
            parking_capacity (str): [optional]  # noqa: E501
            energy_type (EnergyType): [optional]  # noqa: E501
            fuel_type (FuelType): [optional]  # noqa: E501
            sewer_type (str): [optional]  # noqa: E501
            water_type (str): [optional]  # noqa: E501
            amenities (Amenities): [optional]  # noqa: E501
            extra_feature_sqft ([ExtraFeatureSqft]): [optional]  # noqa: E501
            buildg_improve_area ([BuildgImproveArea]): [optional]  # noqa: E501
            tax_account_number (str): [optional]  # noqa: E501
            tax_tape_cut_date (str): [optional]  # noqa: E501
            tax_doc_type (TaxDocType): [optional]  # noqa: E501
            tax_sales_price (str): [optional]  # noqa: E501
            tax_sales_price_code (TaxSalesPriceCode): [optional]  # noqa: E501
            rec_book_number (str): [optional]  # noqa: E501
            rec_page_number (str): [optional]  # noqa: E501
            rec_doc_number (str): [optional]  # noqa: E501
            tax_year (str): [optional]  # noqa: E501
            tax_del_year (str): [optional]  # noqa: E501
            assessed_year (str): [optional]  # noqa: E501
            assessed_land_value (str): [optional]  # noqa: E501
            market_value_year (str): [optional]  # noqa: E501
            market_value_land (str): [optional]  # noqa: E501
            appraised_value_land (str): [optional]  # noqa: E501
            tax_rate_code (str): [optional]  # noqa: E501
            prop_link_id (str): [optional]  # noqa: E501
            geo_id (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
